@import '../../common';
@import '../../typography-helpers';

$headerShadowStandard: inset 0 1px 0 0 $B30, inset 0 -1px 0 0 $B30;
$headerShadowNeutral: inset 0 1px 0 0 $D60, inset 0 -1px 0 0 $D60;
$headerShadowFirstChildNeutral: inset 1px 1px 0 0 $D60, inset 0 -1px 0 0 $D60;
$headerShadowLastChildNeutral: inset -1px 1px 0 0 $D60, inset 0 -1px 0 0 $D60;
$columnShadow: inset 0 -1px 0 0 $D60;
$activeColumnShadow: inset 0 -1px 0 0 $D70;
$rowShadow: inset 0 1px 0 0 $D70;
$cellHorizontalPadding: 12px;
$cellHorizontalEdgePadding: 30px;

:export {
  cellHorizontalPadding: $cellHorizontalPadding;
  cellHorizontalEdgePadding: $cellHorizontalEdgePadding;
}

.table {
  @include FontRoman();
  border-collapse: collapse;
  border-spacing: 0px;
  table-layout: fixed;
  background-color: white;

  &.virtualized {
    display: block;

    thead {
      top: 0;
      display: block;
      position: sticky;
      z-index: 2;

      th {
        box-sizing: border-box;
        padding-top: 12px;
        padding-bottom: 12px;
        height: 42px;
      }
    }

    tbody {
      display: block;
      transform: translateY(0);

      td {
        box-sizing: border-box;
      }
    }

    tr {
      display: flex;
    }

    td, th {
      display: flex;
      align-items: center;
    }

  }
}

.table td, .table th {
  padding-left: $cellHorizontalPadding;
  padding-right: $cellHorizontalPadding;

  &.sticky {
    position: sticky;
    z-index: 1;
  }

  &:last-child {
    padding-left: $cellHorizontalPadding;
    padding-right: $cellHorizontalEdgePadding;
  }

  &:first-child {
    padding-left: $cellHorizontalEdgePadding;
    padding-right: $cellHorizontalPadding;
  }
}

.table th {
  padding-top: 9px;
  padding-bottom: 9px;
  height: 24px;
  color: $D10;
  font-weight: normal;

  &.thSkinStandard {
    background-color: $B40;
    box-shadow: $headerShadowStandard;
  }

  &.thSkinNeutral {
    background-color: $D10-03;
    box-shadow: $headerShadowNeutral;

    &:first-child {
      box-shadow: $headerShadowFirstChildNeutral;
    }

    &:last-child {
      box-shadow: $headerShadowLastChildNeutral;
    }
  }

  .th-container {

    display: flex;
    align-items: center;

    // Support for alignment within flex
    &.alignStart {
      justify-content: flex-start;
    }

    &.alignCenter {
      justify-content: center;
    }

    &.alignEnd {
      justify-content: flex-end;
    }

    .infoTooltipWrapper {
      margin-left: 6px;
    }
  }

  &.th-text {
    @include Text($weight: normal, $size: small);
  }
}


.table td {
  @include Text($weight: thin, $size: small, $secondary: true);

  &.largeVerticalPadding {
    padding-top: 24px;
    padding-bottom: 24px;
  }

  &.mediumVerticalPadding {
    padding-top: 18px;
    padding-bottom: 18px;
  }

  // Cells alignment
  &.alignStart {
    text-align: left;
    text-align: start; // not supported in IE11 & Edge; 'left' as fallback
  }

  &.alignCenter {
    text-align: center;
  }

  &.alignEnd {
    text-align: right;
    text-align: end; // not supported in IE11 & Edge; 'right' as fallback
  }

  &.sticky {
    background-color: $D80;
  }
}

.table.showLastRowDivider td {
  box-shadow: $columnShadow;
}

.table:not(.showLastRowDivider) {
  & tr:not(:last-child) {
    td {
      box-shadow: $columnShadow;
    }
  }
}

.table:not(.showLastRowDivider) {
  & tr:nth-last-child(2) {
    td.hasRowDetails {
      box-shadow: none;
    }
  }
}

.table.showLastRowDivider {
  & tr:nth-last-child(2) {
    td.hasRowDetails {
      box-shadow: $columnShadow;
    }
  }
}

.table td.details {
  padding: 0px;
  height: 0px;
  box-shadow: none;
}

.table td.active {
  padding: 0px;
  height: auto;
  box-shadow: $activeColumnShadow;
}

.table td.important {
  @include Text($weight: thin, $size: medium);
}

.clickableDataRow {
  cursor: pointer;
}

.highlight {
  background-color: $B60;
  td {
    font-weight: 600;
    color: $D10;

    &.sticky {
      background-color: $B60;
    }
  }
}

.selected {
  td:first-child {
    &:not(.sticky) {
      position: relative;
    }

    &::before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      width: 2px;
      background-color: $B10;
    }
  }
}

.sortArrow {
  font-size: 9px;
  margin-left: 6px;
  color: $B10;
  display: flex;
  align-items: center;
}

.row-details:not(:last-child) {
  box-shadow: $activeColumnShadow;
}

.animatedDataRow {
  td {
    box-shadow: none;
  }

  cursor: pointer;

  &:nth-last-child(2) {
    td {
      box-shadow: $rowShadow;
    }
  }
}

.tableHeaderScrollContent {
  overflow-x: hidden;
}

.tableBodyScrollContent {
  overflow-x: auto;
}

.scrollWrapper {
  position: relative;

  &::before,
  &::after,
  .lastSticky::after {
    content: '';
    display: block;
    width: 24px;
    height: 100%;
    position: absolute;
    top: 0;
    pointer-events: none;
    opacity: 0;
    transition: opacity 150ms linear;
  }

  &.leftShadowVisible {
    &:not(.withStickyColumns)::before,
    .lastSticky::after {
      background-image: linear-gradient(to right, rgba($D10, 0.08), rgba($D80, 0));
      left: 0;
      opacity: 1;
    }

    .lastSticky::after {
      left: auto;
      right: -24px;
    }
  }

  &.rightShadowVisible::after {
    background-image: linear-gradient(to left, $D10-10, rgba($D80, 0));
    right: 0;
    opacity: 1;
  }
}

/* sticky action cell */
.stickyActionCell {
  position: sticky;
  right: 0;
}

.stickyActionCell [data-hook="table-action-cell-placeholder"] {
   display: none;
}

.stickyActionCell [data-hook="table-action-cell-popover-menu"] {
  visibility: hidden;
}

.table {
  tr:hover {
    .stickyActionCell {
        background-color: $D80;
    }

    &.clickableDataRow td {
      cursor: pointer;
      background-color: $B50;
    }

    .stickyActionCell [data-hook="table-action-cell-popover-menu"] {
      visibility: visible;
    }
  }

  tr:hover.highlight{
    .stickyActionCell {
      background-color: $B60;
    }
  }
}

.table tr td {
  &.rowDetailsExtended {
    box-shadow: none !important;
  }
}
